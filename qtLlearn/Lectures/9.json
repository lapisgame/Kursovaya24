{
    "index": 9,
    "title": "Лекция 9",
    "content": "<pre><b>Лекция 9</b><br><b>Основы комбинаторики</b><br><i>(Подробный разбор: от перестановок до реальных задач)</i><br><br><b>1. Что такое комбинаторика?</b><br><b>Комбинаторика</b> — это раздел математики, изучающий способы подсчёта и упорядочивания объектов.<br><b>Где применяется?</b><br>Генерация паролей.<br>Оптимизация маршрутов (например, задача коммивояжёра).<br>Анализ вероятностей (лотереи, карточные игры).<br>Программирование (алгоритмы, обработка данных).<br><br><b>2. Основные понятия</b><br><b>2.1. Перестановки (Permutations)</b><br><b>Определение:</b> Упорядоченная выборка <b>всех</b> элементов из множества.<br><b>Формула:</b>\nPn=n! \nгде n!=1⋅2⋅3⋅...⋅n (читается как «эн факториал»).<br><b>Пример:</b>\nСколько способов расставить книги А, Б, В на полке?<br>Варианты: АБВ, АВБ, БАВ, БВА, ВАБ, ВБА → 6 способов.<br>По формуле: 3!=6.<br><b>Особенности:</b><br>Все элементы участвуют в перестановке.<br>Порядок важен: АБВ ≠ БАВ.<br><b>Код на Python:</b><br>import math<br>n = 3<br>print(math.factorial(n))  # 6<br><br><br><b>2.2. Размещения (Arrangements)</b><br><b>Определение:</b> Упорядоченная выборка <b>k</b> элементов из <b>n</b>.<br><b>Формула</b><b>:</b>\nA_n^k=n!/(n−k)!<br><b>Пример:</b>\nСколько двузначных чисел можно составить из цифр 1, 2, 3 без повторений?<br>Варианты: 12, 13, 21, 23, 31, 32 → 6 чисел.<br>По формуле: \nA_3^2=3!/(3−2)!=6/1=6<br><br><b>Особенности:</b><br>Порядок важен: 12 ≠ 21.<br>Элементы не повторяются.<br><b>Код на Python:</b><br>python<br>Copy<br>Download<br>from itertools import permutations<br>items = [1, 2, 3]<br>k = 2<br>print(list(permutations(items, k)))  <br># Результат: [(1,2), (1,3), (2,1), (2,3), (3,1), (3,2)]<br><br><br><b>2.3. Сочетания (Combinations)</b><br><b>Определение:</b> Неупорядоченная выборка <b>k</b> элементов из <b>n</b>.<br><b>Формула:</b>\nC_n^k=n! / k!(n−k)!<br><b>Пример:</b>\nСколько способов выбрать 2 фрукта из яблока, банана и апельсина?<br>Варианты: яблоко+банан, яблоко+апельсин, банан+апельсин → 3 способа.<br>По формуле: C_3^2 = 3! / (2! * 1!) = 3<br><b>Особенности:</b><br>Порядок не важен: яблоко+банан = банан+яблоко.<br><b>Код</b><b> </b><b>на</b><b> Python:</b><br>from itertools import combinations<br>print(list(combinations(items, 2)))  <br># Результат: [(1,2), (1,3), (2,3)]<br><br><br><b>4. Практические задачи</b><br><b>4.1. Задача о пароле</b><br><b>Условие:</b> Сколько паролей длиной 4 символа можно составить из букв A, B, C, если символы могут повторяться?<br><b>Решение:</b><br>Каждый символ — 3 варианта.<br>Всего: 34=8134=81.<br><br><b>4.2. Задача о команде</b><br><b>Условие:</b> В группе 10 человек. Сколько способов выбрать 3 из них для участия в конкурсе, если порядок выбора не важен?<br><b>Решение:</b><br>Используем сочетания: C_10^3=120.<br><br><b>4.3. Задача о вероятности</b><br><b>Условие:</b> В лотерее 50 билетов, 5 выигрышных. Какова вероятность, что 2 случайно выбранных билета окажутся выигрышными?<br><b>Решение:</b><br>Число благоприятных исходов: C_5^2=10.<br>Всего исходов: C_50^2=1225.<br>Вероятность: 10 / 1225≈0.00816.<br><br><b>5. Комбинаторика в программировании</b><br><b>5.1. Генерация всех вариантов</b><br><b>Пример:</b> Найти все подмножества множества [1, 2, 3].<br>from itertools import chain, combinations<br><br>def all_subsets(items):<br>    return chain.from_iterable(combinations(items, r) for r in range(len(items)+1))<br><br>print(list(all_subsets([1, 2, 3])))  <br># Результат: [(), (1,), (2,), (3,), (1,2), (1,3), (2,3), (1,2,3)]<br><br><b>5.2. Оптимизация алгоритмов</b><br>Комбинаторные методы используются в:<br>Поиске кратчайших путей (графы).<br>Шифровании данных (перебор ключей).<br>Машинном обучении (выбор признаков).<br><br><b>6. Итоги</b><br><b>Перестановки</b> — порядок всех элементов.<br><b>Размещения</b> — упорядоченные выборки.<br><b>Сочетания</b> — неупорядоченные выборки.<br><b>Повторения</b> меняют формулы!<br><b>Python-библиотеки</b> (itertools, math) упрощают расчёты.<br><br></pre>"
}