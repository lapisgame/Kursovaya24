{
    "index": 0,
    "title": "Лекция 1",
    "content": "Лекция 1<br><br><i><b>Установка</b></i><br>Для начала нам потребуется скачать питон с официального сайта. Важно (!) поставить галочку add python __ to PATH. Затем нажать Install now. После чего запустить скаченный файл.<br>Можно работать с питоновскими файлами и без среды разработки (IDE), но это не совсем удобно, так как для запуска файла с расширение .py в терминале (это командная строка или же cmd) придется после перехода в директорию с файлом написать python ___.py, после чего в консоли появится результат выполнения программы.<br>Более легкий способ потребует для запуска нажать на одну кнопку. И вариант этот называется PyCharm. Скачать можно с сайта  . Нужна Community версия, она полностью бесплатна и почти не имеет обрезанного функционала, так как программировать мы будем только на Питоне. А профессиональная версия включает в себя еще расширенные инструменты для разработки на HTML, JS и баз данных SQL.<br><br><i><b>Арифметические операции</b></i><i><b> </b></i><br>Рассмотрим простейшие арифметические операции и как они выглядят на Питоне:<br><table border=\"1\"><tr><td>Сложение</td><td>Вычитание</td><td>Умножение</td><td>Возведение в степень</td><td>Деление</td><td>Целая часть  от деления</td><td>Остаток  деления</td></tr><tr><td>+   (+=)</td><td>-     (-=)</td><td>*     (*=)</td><td>**</td><td>/     (/=)</td><td>//</td><td>%</td></tr><tr><td>3 + 2</td><td>3 - 2</td><td>3 * 2</td><td>3 ** 2</td><td>7 / 3</td><td>7 // 3</td><td>7 % 3</td></tr><tr><td>5</td><td>1</td><td>6</td><td>9</td><td>2.33333…</td><td>2</td><td>1</td></tr></table><br><i><b>Переменные и синтаксис</b></i><br>Python может определить тип переменной: для x = 1.35 будет выведен тип <i><b>FLOAT</b></i>. <br>Что будет выведено, если<br>x = input()   <br>y = input()   <br>print(x+y) <br>при введении чисел 123 и 354. Должно быть 477? Нет, 123354. Всё это связанно с динамической типизацией и тем, что input выдает строковое значение. Чтобы преобразовать переменную одного типа в другой, мы можем использовать следующие функции:<br><br>str(х) - переводит переменную х в строковую<br>int(х) – переводит переменную х в целочисленную<br>float(х) – переводит переменную х в переменную с плавающей точкой<br>Тип bool – это  логические переменные, то есть принимающие значение True (истина) или False (ложь).<br><br>Ко всем переменным можно просто обращаться по имени и получать их значение. Но строковые переменные – особенные, и к ним можно обращаться по индексу символа. Индексация в строке происходит с нуля. Вывести длину строковой переменной можно командой len(s). Пример обращения к строке по индексу:<br>S=’spam’<br>print(S[0])  >> s<br>print(S[2])  >> a<br>print(S[-2]) >>a<br><br>Строки можно умножать на числа, складывать между собой.<br>S1 = 'spam'<br>S2 = 'eggs'<br>print(S1 + S2)\t>>'spameggs'<br><br>print('spam' * 3)  >>spamspamspam<br><br>Строковые переменные можно доставать «срезами», делается это так:<br>название_переменной[X:Y], где X – начало среза, а Y – окончание;<br>символ с номером Y в срез не входит. По умолчанию первый индекс равен 0, а второй - длине строки.<br><br>s = 'spameggs'<br>>>> s[3:5]\t>>'me'<br>>>> s[2:-2]\t>>'ameg'<br>>>> s[:6]\t>>'spameg'<br>>>> s[1:]\t>>'pameggs'<br><br>Функции для перевода всей строки в верхний регистр _.upper(), а для перевода всей строки в нижний регистр _.lower(), _.title() это перевод начальных символов всех слов в верхний регистр, _.capitalize() только первый символ заглавный. <br>Сбор строки из массива осуществляется так<br> переменная = “способ связи”.join (название массива) или вместо массива можно указать название строковой переменной для разделения между каждым символом указанным способом связи.<br><i><b>Условные операторы</b></i><br>Синтаксис условных операторов if elif else:<br>if условия 1: <br>    действие 1<br>elif условие 2:<br>    действие 2<br>else:<br>    действие 3<br>Блок elif является необязательным и конструкцию if elif else можно построить обычным образом если иначе –  if else. Elif может быть сколько угодно.<br><br>Укороченная версия if-else:<br>if X:<br>    A=Y<br>else:<br>    A=Z<br>Можно также написать A=Y if X else Z. В литературе этот прием называется трехместное выражение if-else.<br><br><i><b>Логические операции</b></i><br>Сравнение возвращает логическое значение.<br>Рассмотрим основные логические операторы: X and Y – логическое И (выдает истину только когда Х И Y истинны), X or Y – логическое ИЛИ (выдает истину, если хотя бы 1 из двух истинно), X xor Y – взаимоисключающее ИЛИ (является истиной, если только одно из двух истина), not X – логическое отрицание (инверсия).<br><table border=\"1\"><tr><td>А</td><td>В</td><td>n ot A</td><td>A and B</td><td>A or B</td><td>A  xor  B</td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td></tr></table><br><br>"
}