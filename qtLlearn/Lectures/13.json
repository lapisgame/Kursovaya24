{
    "index": 13,
    "title": "Лекция 13",
    "content": "<pre><b>Лекция 13</b><br><b>Корреляция и регрессия</b><br><i>(Как находить связи между переменными и предсказывать будущее)</i><br><br><b>1. Корреляция: мера связи</b><br><b>Корреляция</b> показывает, насколько две переменные связаны линейно.<br><b>1.1. Коэффициент корреляции Пирсона</b><br>Формула:<br>r = ∑(xi−xˉ)(yi−yˉ) / ∑(xi−xˉ)^2⋅∑(yi−yˉ)^2​<br>r∈[−1,1]:<br>r=1 — идеальная прямая связь.<br>r=−1 — идеальная обратная связь.<br>r=0 — связи нет.<br><b>Пример на Python:</b><br>import numpy as np<br><br>x = np.array([1, 2, 3, 4, 5])<br>y = np.array([2, 4, 5, 4, 5])<br><br>r = np.corrcoef(x, y)[0, 1]<br>print(f\"Корреляция Пирсона: {r:.2f}\")  # ~0.79<br><br><b>1.2. Другие виды корреляции</b><br><b>Спирмена</b><b> (ранговая):</b>\nОценивает монотонную связь. Подходит для нелинейных данных.<br>from scipy.stats import spearmanr<br>rho, _ = spearmanr(x, y)<br>print(f\"Корреляция Спирмена: {rho:.2f}\")  # ~0.82<br><b>Кендалла</b><b>:</b>\nИспользуется для порядковых данных.<br>from scipy.stats import kendalltau<br>tau, _ = kendalltau(x, y)<br>print(f\"Корреляция Кендалла: {tau:.2f}\")  # ~0.73<br><br><b>1.3. Визуализация корреляции</b><br><b>График рассеяния (</b><b>scatter</b><b> </b><b>plot</b><b>):</b><br>import matplotlib.pyplot as plt<br><br>plt.scatter(x, y, color='blue')<br>plt.title(\"Зависимость y от x\")<br>plt.xlabel(\"x\")<br>plt.ylabel(\"y\")<br>plt.grid(True)<br>plt.show()<br><br><b>2. Регрессия: предсказание значений</b><br><b>Регрессия</b> позволяет моделировать зависимость одной переменной от другой.<br><b>2.1. Линейная регрессия</b><br>Уравнение:<br>y=b0+b1⋅x+ϵ<br>b0​ — интерсепт (сдвиг).<br>b1​ — коэффициент наклона.<br>ϵ — ошибка.<br><b>Метод наименьших квадратов (МНК):</b><br>b1=∑(xi−xˉ)(yi−yˉ) / ∑(xi−xˉ)^2,   b0=yˉ−b1⋅xˉ<br><b>Пример</b><b> </b><b>на</b><b> Python:</b><br>from sklearn.linear_model import LinearRegression<br><br>X = x.reshape(-1, 1)  # Преобразуем в 2D-массив<br>model = LinearRegression().fit(X, y)<br><br>print(f\"Уравнение: y = {model.coef_[0]:.2f}x + {model.intercept_:.2f}\")<br># Пример вывода: y = 0.70x + 1.90<br><br># Предсказание<br>y_pred = model.predict(X)<br><br><b>2.2. Оценка качества модели</b><br><b>Коэффициент детерминации (R²):</b><br>R2 = 1−(∑(yi−y^i)^2 / ∑(yi−yˉ)^2​)<br>R2=1 — идеальное предсказание.<br>R2=0 — модель не лучше среднего.<br><b>Среднеквадратичная ошибка (MSE):</b><br>MSE=1/n * ∑(yi−y^i)^2<br><br><b>Расчёт</b><b> </b><b>на</b><b> Python:</b><br>from sklearn.metrics import r2_score, mean_squared_error<br><br>r2 = r2_score(y, y_pred)<br>mse = mean_squared_error(y, y_pred)<br>print(f\"R²: {r2:.2f}, MSE: {mse:.2f}\")  # R²: ~0.62, MSE: ~0.46<br><br><b>2.3. Визуализация регрессии</b><br>plt.scatter(x, y, color='blue', label='Данные')<br>plt.plot(x, y_pred, color='red', linewidth=2, label='Линия регрессии')<br>plt.title(\"Линейная регрессия\")<br>plt.legend()<br>plt.show()<br><br><b>3. Множественная регрессия</b><br>Моделирует зависимость одной переменной от <b>нескольких</b> предикторов.<br><b>Пример:</b><br># Данные: площадь дома (X1) и число комнат (X2) → цена (y)<br>X = np.array([[100, 2], [150, 3], [200, 4], [250, 4]])<br>y = np.array([300, 450, 600, 750])<br><br>model = LinearRegression().fit(X, y)<br>print(f\"Уравнение: y = {model.coef_[0]:.2f}x1 + {model.coef_[1]:.2f}x2 + {model.intercept_:.2f}\")<br><br><b>4. Распространённые ошибки</b><br><b>Путаница между корреляцией и причинностью:</b><br>Корреляция не означает, что одна переменная вызывает другую!<br><b>Игнорирование нелинейных связей:</b><br>Если связь не линейна, используйте полиномиальную регрессию.<br><b>Переобучение (</b><b>overfitting</b><b>):</b><br>Не добавляйте слишком много предикторов без необходимости.<br><br><b>5. Практическая задача</b><br><b>Условие:</b> Предсказать стоимость автомобиля на основе пробега.<br><b>Данные:</b><br>import pandas as pd<br>data = pd.DataFrame({<br>    'Пробег (тыс. км)': [50, 100, 150, 200, 250],<br>    'Цена (тыс. руб)': [800, 600, 500, 400, 300]<br>})<br><b>Решение:</b><br>python<br>Copy<br>Download<br>X = data[['Пробег (тыс. км)']]<br>y = data['Цена (тыс. руб)']<br><br>model = LinearRegression().fit(X, y)<br>print(f\"Уравнение: Цена = {model.coef_[0]:.2f} * Пробег + {model.intercept_:.2f}\")<br># Пример: Цена = -2.00 * Пробег + 900.00<br><br><b>6. Применение в Data Science</b><br><b>Прогнозирование:</b> Цены, спрос, курс акций.<br><b>Анализ влияния:</b> Как реклама влияет на продажи.<br><b>A/B-тесты:</b> Оценка эффективности изменений.<br><br></pre>"
}