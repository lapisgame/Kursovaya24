{
    "index": 3,
    "title": "Лекция 4",
    "content": "<pre><i><b>Лекция 4</b></i><br><br><i><b>Функции и словари</b></i><br><br><b>Словарь</b> — неупорядоченная структура данных, которая позволяет хранить пары «ключ — значение».<br>Давайте посмотрим на пример, а после разберемся с синтаксисом:<br>user = {'name': 'Josh', 'age': '24', 'balance': '1024$'}<br>Таким образом мы сформировали структуру списка user, задав три пары ключ-значение:<br><i>name,</i><i> </i><i>age,</i><i> </i><i>balance</i> - <b>ключи</b><br><i>Josh, 24, 1024$</i> - <b>значения</b><b> </b><br><br>Итак, на первом примере мы увидели, как создается словарь, давайте посмотрим на синтаксис в общем виде, а позже рассмотрим еще один способ как создать словарь.<br><i>название_списка</i> = {'ключ_1': 'значение_1', … , 'ключ_n': 'значение_n'}<br>Второй способ создания словаря, это специальная функция <b>dict</b>, вот в таком виде:<br><i><b>a</b></i> = dict(short='dict', long='dictionary')<br>где short и long – ключи, а 'dict' и 'dictionary' – значения<br><br><i><b>b</b></i> = dict([(1,3), (2,4)])<br>где 1 и 2 – ключи, а 3 и 4 – значения<br>Так же есть еще два способа формирования словаря, но их я рассказывать не буду, если будет интересно прочтете в официальной документации.<br><br>Обращение к словарю происходит по ключу и в результате вы получаете значение, советующее ключу, например обратимся к нашему словарю <i>user</i> по ключу <i>age</i>:<br>Чтобы это сделать напишем имя словаря и в квадратных скобках ключ<br>user['age'],  вернет нам значение 24<br><br>Добавление значение в уже сформированный список происходит таким образом:<br>Имя_словаря['ключ'] = 'значение'<br>Если такой ключ уже есть в словаре, то соответствующее значение будет перезаписано на новое.<br><br>Теперь давайте рассмотрим <b>основные Методы словарей</b>:<br><b>dict.clear</b>() - очищает словарь.<br><b>dict.copy</b>() - возвращает копию словаря. <br><b>dict.fromkeys</b>(seq[, value]) - создает словарь с ключами из seq и значением value (по умолчанию None). <br><b>dict.get</b>(key[, default]) - возвращает значение ключа, но, если его нет, не бросает исключение, а возвращает default (по умолчанию None). <br><b>dict.items</b>() - возвращает пары (ключ, значение). <br><b>dict.keys</b>() - возвращает ключи в словаре. <br><b>dict.pop</b>(key[, default]) - удаляет ключ и возвращает значение. Если ключа нет, возвращает default (по умолчанию бросает исключение). <br><b>dict.popitem</b>() - удаляет и возвращает пару (ключ, значение). Если словарь пуст, бросает исключение KeyError. Помните, что словари неупорядоченные. <br><b>dict.setdefault</b>(key[, default]) - возвращает значение ключа, но, если его нет, не бросает исключение, а создает ключ со значением default (по умолчанию None). <br><b>dict.update</b>([other]) - обновляет словарь, добавляя пары (ключ, значение) из other. Существующие ключи перезаписываются. Возвращает None (не новый словарь!). <br><b>dict.values</b>() - возвращает значения в словаре.<br><br><i><b>Функции</b></i><br>В различных источниках мы очень часто слышим слово <i>функция</i>, давайте разберемся что это такое. В математике под этим термином понимают зависимость одной переменной величины от другой. Другими словами, взаимосвязь между величинами.\nВ нашем, программистском случае, функция – это облегчение задачи, если подразумевается некоторое количество раз использовать один и тот же фрагмент, или с одинаковыми или даже с разными входными данными.<br>Таким образом представимо объявление функции в общем виде:<br>def имя_функции ([параметры]):<br>    инструкции<br><br>Вызов функции происходит в коде следующим образом: имя_функции([параметры])<br><br>Давайте рассмотрим на примере две самые простые функции, первая будет просто печатать Hello,world,  а вторая будет принимать на вход два числа и складывать их:<br><br>def say_hello():<br>print(‘Hello,world’)<br><br>def summ(x, y):<br>return x+y<br><br>Если функция ничего явно не выводит в консоль/файл или глобальные переменные, то необходимо использовать служебное слово return, значение, написанное после него будет возвращено в программу.<br><br>Давайте теперь вызовем наши функции и посмотрим, что они сделают<br>Sumxy=summ(2, 3)<br>print(Sumxy) #5<br>say_hello()<br>в консоли отобразится Hello,world<br><br>Также функция может не иметь имени. Подобные функции называются анонимными или лямбда функциями, и создаются с помощью инструкции lambda. Кроме этого, их не обязательно присваивать переменной, как делали мы инструкцией def функция().<br>Lambda аргументы: выражение<br><br>increment = lambda x: x+1<br>a = increment(1)<br>print(a) #2<br><br>Основное преимущество лямбда функции получают не в таком виде, ибо в нашем примере они ведут себя как обычные функции, их основное применение это связка с особыми функциями: <b>map</b>, <b>filter</b>, <b>reduce</b>, <b>zip</b><br>Но о их применении возможно будет дальше…<br></pre>"
}