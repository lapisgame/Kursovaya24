{
    "index": 2,
    "title": "Лекция 3",
    "content": "<pre>Лекция 3<br><br><b>Списки и массивы</b><br><br>    Начну я свой рассказ  по это теме со списков. Если коротко, то список это переменная в которой хранится не одно значение, а несколько. Сформировать его можно разными способами: объявление пустого списка и дальнейшее дополнение его различными значениями, сразу создать его с необходимыми значениями, преобразование строковых переменных в списки, путем заключения строковой переменной в функцию list(__) и итоговое ее присвоение к переменной и еще нескольких <br>    Каждый из элементов в списке имеет свой порядковый номер, по которому можно к нему обратиться. Обращение к списку происходит следующим образом: дан список <b>b=[1,2,3,56]</b> и мы хотим вывести на экран его второй элемент, для этого мы сделаем следующее <b>print(b[1]) </b>   <b>2</b>. Вы, наверное, спросите почему один, но в самой первой лекции, когда я рассказывал про строки,  я же говорил, что нумерация (индексация) в python начинается не с 1, как нумеровали бы математики, а с 0, как всегда, нумеруют программисты, поэтому чтобы достать <b>n-ый</b> элемент мы запросим элемент с индексом <b>n-1</b>.<br>    Помимо обращения по одиночному индексу к списку можно обращаться, как и к строке, по так называемому <i>срезу</i>, то есть достать несколько значений, от и до определенного индекса. Покажем на примере: возьмём ранее объявленный список b и вытащи из него первые три значения <b>print</b><b>(</b><b>b</b><b>[0:3])</b> или же можно просто написать <b>print</b><b>(</b><b>b</b><b>[:3])</b> ответ будет одинаковый <b>[1,2,3]</b>. Индексация среза так же ведется с нуля, элемент с последним индексом не включается в срез.<br><br>    Но всё это так или иначе уже было у нас в теме про строки, давайте перейдём к чему-то новому и еще не встречавшемуся ранее.<br>Для всех наших манипуляций мы возьмём такой список:<br><b>Sp</b><b> = [1,56,35,95,364,1]</b> и нам еще нужен будет другой список, для склейки, возьмём его из прошлого примера: <b>b</b><b> = [1,2,3,56]</b><br>Представляю вашему вниманию список <i>основных функций</i> необходимый для работы со списками.<br><b>print</b><b>(</b><b>len</b><b>(</b>Sp<b>))</b> – выводит целое число, длину списка<br><b>Sp</b><b>.</b><b>append</b><b>(</b>элемент<b>)</b> – вставка элемента в конец списка<br><b>Sp</b><b>.</b><b>extend</b><b>(</b>b<b>)</b> – конкатенация («склейка») двух списков, дополнительный список дописывается в конец исходного, дальнейшее обращение к уже «склеенному» списку происходит как и к исходному.<br><b>Sp</b><b>.</b><b>insert</b><b>(</b>индекс, элемент<b>)</b> – вставка в место с выбранным индексом, выбранного элемента<br><b>Sp</b><b>.</b><b>remove</b><b>(</b>элемент<b>)</b> – удаление конкретного элемента, не важно знаем мы его индекс или нет. Если таких элементов несколько, то удалится только первый из них (с наименьшим индексом). Если таких элементов нет, то выдастся ошибка <i><b>ValueError: «элемент» is not in list</b></i><br><b>Sp</b><b>.</b><b>pop</b><b>(</b>индекс<b>)</b> – удаляет элемент по индексу. Если индекс не указывать и оставить просто пустые скобки, то будет удалён последний элемент в списке.<br><b>print</b><b>(</b><b>Sp</b><b>.</b><b>index</b><b>(</b>элемент<b>)) </b>– выводит индекс элемента<br><b>print</b><b>(</b><b>Sp</b><b>.</b><b>count</b><b>(</b>элемент<b>))</b> – выводит количество таких элементов<br><b>Sp</b><b>.</b><b>sort</b><b>()</b> – сортирует <i><b>по возрастанию</b></i> все элементы в списке. Если будет указать в скобках reverse = True, то сортировка будет производиться <i><b>по убыванию</b></i>.<br><b>Sp</b><b>.</b><b>reverse</b><b>()</b> – делает список задом на перед<br><b>Sp</b><b>.</b><b>clear</b><b>()</b> – очищает список (мало ли вам это понадобится)<br><br>Теперь мы вернемся к нашим спискам и посмотри все на примерах:<br><table border=\"1\"><tr><td>Sp.append(45) print(Sp)</td><td>[1, 56, 35, 95, 364, 1, 45]</td></tr><tr><td>Sp.extend(b) print(Sp)</td><td>[1, 56, 35, 95, 364, 1, 45, 1, 2, 3, 56]</td></tr><tr><td>Sp.insert(1, 56) print(Sp)</td><td>[1, 56, 56, 35, 95, 364, 1, 45, 1, 2, 3, 56]</td></tr><tr><td>Sp.remove(56) print(Sp)</td><td>[1, 56, 35, 95, 364, 1, 45, 1, 2, 3, 56]</td></tr><tr><td>Sp.pop(1) print(Sp)</td><td>[1, 35, 95, 364, 1, 45, 1, 2, 3, 56]</td></tr><tr><td>print(Sp.index(56))</td><td>9</td></tr><tr><td>print(Sp.count(35))</td><td>1</td></tr><tr><td>Sp.sort() print(Sp)</td><td>[1, 1, 1, 2, 3, 35, 45, 56, 95, 364]</td></tr><tr><td>Sp.sort(reverse = True)</td><td>[364, 95, 56, 45, 35, 3, 2, 1, 1, 1]</td></tr><tr><td>Sp.reverse() print(Sp)</td><td>[364, 95, 56, 45, 35, 3, 2, 1, 1, 1]</td></tr><tr><td>Sp.clear() print(Sp)</td><td>[]</td></tr></table><br><br><b>«Массивы»</b><br>Спросив у программиста на python что такое массив в этой языке он на вас посмотрит очень странно, потому что нет такого в python есть списки, разной вложенности. Я намерено не стал рассказывать об этом ранее, но можно создать список со списками. Проще если я все это продемонстрирую на примере и всё сразу станет ясно.<br>Возьмем следующие данные, полученные с термометров в разных регионах России:<br><table border=\"1\"><tr><td>Станция</td><td>День 1</td><td>День 2</td><td>День 3</td><td>День 4</td></tr><tr><td>I</td><td>-8</td><td>-14</td><td>-19</td><td>-18</td></tr><tr><td>II</td><td>25</td><td>28</td><td>26</td><td>20</td></tr><tr><td>III</td><td>11</td><td>18</td><td>20</td><td>25</td></tr></table>Давайте посмотрим, что мы получили в некоторые из дней, например 1 день на 3 станции, но у нас же еще нет данных, только таблица, ну мы ее обработаем сейчас.<br>Создадим список temp в который будем записывать списки, с температурами по станциям, один вложенный список = одна станция.<br><b>temp</b><b>=[[-8,-14,-19,-18],[25,28,26,20],[11,18,20,25]]</b><br>Хорошо, список со списками у python разработчиков и массив у нормальных людей мы получили, теперь выведем нужные нам данные, но если написать <b>print</b><b>(</b><b>temp</b><b>[2])</b>, то получить данные за 1 день будет проблемно, так как мы получим список значений, а не одно, для получения нужного мы воспользуемся двойной индексацией, а именно напишем вот так <b>print</b><b>(</b><b>temp</b><b>[2][0])</b> и получим в итоговом выводе значение <b>11</b>. На основе этого мы можем понять, что индексы идут в порядке вложенности списков. Никто кроме здравого смысла нам не мешает сделать и список в списке в списке в списке, если это конечно имеет смысл.<br>Понимая, что массив это список со списками можем логично заключить, что на него работают все те же функции что уже были описаны в пункте выше.<br></pre>"
}