{
    "index": 1,
    "title": "Лекция 2",
    "content": "<pre><i><b>Лекция 2</b></i><br><br><i><b>Циклы</b></i><br><br>Прежде чем мы начнем циклы, надо бы посмотреть и разобраться с одной функцией, а именно range().<br>В общем виде если напечатать print(range(5)), то ответ будет объект типа range и в консоли будет следующее range(0, 5), а не 0,1,2,3,4. Если мы хотим получить именно список значений необходимо обернуть range в list() и получить следующую конструкцию list(range(0, 5)), при выводе сего счастья мы получим 0,1,2,3,4. Но как-то меня немного понесло вперед, надо бы немного рассказать про циферки внутри и можно бежать дальше.<br>И так синтаксис функции range имеет три варианта исполнения и выглядит так: <br>range(x), где х-1 это последние обрабатываемое значение<br>range(x,y), где х это начальный элемент, а у-1 конечный элемент<br>range(x,y,z), где х и у такие же как и в варианте 2, но при этом еще добавляется шаг изменения z<br>Теперь давайте немного примеров и пойдем к циклам:<br>print(list(range(5))) \t\t#[0,1,2,3,4]<br>print(list(range(2,7)))\t\t#[2,3,4,5,6]<br>print(list(range(3,11,4)))\t#[3,7]<br><i>Ну а теперь циклы</i><br><br><b>For</b><b> </b><b>__ </b><b>in</b><b> _</b><b>_</b><b>(</b><b>в течении условия)</b><br>Самый просто пример применения цикла for in это следующее конструкция, она есть во всех языках и даже смысл один и тот же, но у for in есть другие прикольные возможности, но о них не в этот раз, а когда я расскажу массивы. И так давайте посмотрим на вот такую конструкцию:<br>for i in range(5):<br>    print(i)<br>вывод по итогу, будет следующий:<br>0\t1\t2\t3\t4<br><br>В общем-то нам этого кажется даже будет достаточно, вместо простого range(x) можно использовать все вышеописанные варианты. Зачем? Ну вам виднее.<br><br><b>While</b><b> (пока условие)</b><br>Цикл while также используется для повторения частей кода, но вместо зацикливания на какое-то количество раз, он выполняет работу до тех пор, пока выполняется условие. Давайте взглянем на простой пример со следующим условием:<br>Выводим х прибавляя каждый раз 0,5 пока он не станет больше 3, давайте напишем, что нам мешает). Самое главное не забудьте определить переменную которой мы будем пользоваться, а то питон будет ругаться ошибками по типу (name ‘x’ is not defined).<br>x=0<br>while x<3:<br>      print(x)<br>      x+=0.5<br>Готово! Запустим сей прекрасный код мы увидим следующую последовательность<br>0\t0.5\t1.0\t1.5\t2.0\t2.5<br>Если бы мы написали сначала плюс потом вывод, то ноля бы не было, а в конце добавилось бы еще 3.0<br>Ну вот и вроде всё что хотелось по этому поводу рассказать, сегодня лекция много меньше, чем предыдущая, но практики будет больше))).<br></pre>"
}