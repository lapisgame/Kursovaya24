{
    "index": 12,
    "title": "Лекция 12",
    "content": "<pre><b>Лекция 12</b><br><b>Центральные предельные теоремы</b><br><i>(Почему нормальное распределение правит миром данных)</i><br><br><b>1. Что говорит ЦПТ?</b><br><b>Центральная предельная теорема (ЦПТ)</b> утверждает:<br>Если брать <b>большое количество выборок</b> (например, 1000 раз по 30 элементов) из любого распределения (даже ненормального!), то распределение <b>средних значений этих выборок</b> будет стремиться к нормальному распределению.**<br><b>Почему это важно?</b><br>Объясняет, почему нормальное распределение так распространено в природе и данных.<br>Позволяет использовать методы статистики даже для ненормальных исходных данных.<br><br><b>2. Формулировка теоремы</b><br>Пусть X1,X2,...,Xn — независимые, одинаково распределённые случайные величины с:<br>Математическим ожиданием μ.<br>Конечной дисперсией σ^2.<br>Тогда при n→∞ распределение выборочного среднего X=X1+X2+...+Xn / n​​ будет стремиться к нормальному распределению:<br>X∼N(μ,σ^2 / n).<br><b>Простыми словами:</b><br>Средние значения выборок будут группироваться вокруг истинного среднего μ.<br>Разброс средних уменьшается с ростом n<br><br><b>3. Демонстрация на Python</b><br><b>Задача:</b> Показать, как средние выборок из равномерного распределения становятся нормальными.<br><b>Шаги:</b><br>Сгенерируем 1000 выборок по 30 элементов из равномерного распределения.<br>Для каждой выборки вычислим среднее.<br>Построим гистограмму средних.<br><b>Код:</b><br>import numpy as np<br>import matplotlib.pyplot as plt<br><br># Параметры<br>n_samples = 1000  # Количество выборок<br>sample_size = 30   # Размер каждой выборки<br>data = []<br><br># Генерация данных<br>for _ in range(n_samples):<br>    sample = np.random.uniform(0, 1, sample_size)  # Равномерное распределение<br>    data.append(np.mean(sample))<br><br># Визуализация<br>plt.hist(data, bins=30, density=True, alpha=0.6, label='Средние выборок')<br><br># Нормальное распределение для сравнения<br>mu = 0.5  # Среднее равномерного распределения [0,1]<br>sigma = np.sqrt(1/12 / sample_size)  # Дисперсия равномерного: σ² = (b-a)²/12<br>x = np.linspace(0.3, 0.7, 100)<br>plt.plot(x, 1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-0.5 * ((x - mu)/sigma)**2), 'r-', lw=2, label='Теория')<br><br>plt.title(\"Распределение средних выборок\")<br>plt.legend()<br>plt.show()<br><b>Результат</b><b>:</b><br>Гистограмма средних будет напоминать колокол Гаусса, даже если исходные данные равномерные!<br><br><b>4. Условия применимости ЦПТ</b><br><b>Независимость:</b> Элементы выборки не должны влиять друг на друга.<br><b>Одинаковое распределение:</b> Все данные взяты из одной генеральной совокупности.<br><b>Конечная дисперсия:</b> Дисперсия не должна быть бесконечной (например, распределение Коши не подходит).<br><b>Что делать, если условия нарушены?</b><br>Увеличить размер выборки n.<br>Использовать методы, устойчивые к ненормальности (например, бутстреп).<br><br><b>5. Практические примеры</b><br><b>5.1. Оценка среднего дохода</b><br><b>Задача:</b> Оценить средний доход в городе, где распределение доходов сильно скошено (богатые люди — редки, но их доходы огромны).<br><b>Решение:</b><br>Собрать множество случайных выборок по 100 человек.<br>По ЦПТ средние этих выборок будут нормально распределены.<br>Построить доверительный интервал для среднего.<br><br><b>5.2. A/B-тестирование</b><br><b>Задача:</b> Сравнить конверсию двух версий сайта.<br><b>Как помогает ЦПТ?</b><br>Конверсия — биномиальное распределение (пользователь либо купил, либо нет).<br>При большом трафике распределение средней конверсии становится нормальным.<br>Можно применять t-тесты для сравнения.<br><br><b>6. Ограничения ЦПТ</b><br><b>Медленная сходимость:</b> Для сильно скошенных распределений (например, экспоненциального) может потребоваться очень большой n.<br><b>Не работает для «тяжёлых хвостов»:</b> Если данные имеют выбросы с бесконечной дисперсией (распределение Коши).<br><b>Пример с распределением Коши:</b><br># Генерация данных из распределения Коши<br>data_cauchy = np.random.standard_cauchy(1000)<br>plt.hist(data_cauchy, bins=50, range=(-10, 10), density=True)<br>plt.title(\"Распределение Коши\")<br>plt.show()<br>Даже при большом n средние не будут нормальными!<br></pre>"
}